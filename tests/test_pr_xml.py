import os.path
from urllib import parse
import uuid

import cv2
from tqdm import tqdm

from src.heigher_service.utils.common import BLUtils
from src.heigher_service.utils.pr_sequence_utils import PrSequenceUtils, ClipItem, PrFile


def get_ab_point_2():
    return [(1737, 1, 26), (1764, 27, 11), (2108, 38, 62), (2140, 100, 48), (2190, 148, 11), (2306, 159, 12),
            (2318, 171, 19), (2448, 190, 46), (2518, 236, 23), (2546, 259, 26), (2584, 285, 31), (2619, 316, 11),
            (3137, 327, 12), (3150, 339, 73), (3226, 412, 53), (3450, 465, 56), (3394, 521, 23), (3433, 544, 11),
            (3518, 555, 12), (3530, 567, 11), (3542, 578, 11), (3553, 589, 11), (3564, 600, 23), (3677, 623, 37),
            (3716, 660, 40), (3758, 700, 11), (3769, 711, 121), (3900, 832, 12), (3908, 844, 11), (3919, 855, 51),
            (3974, 906, 18), (4036, 924, 28), (4296, 952, 35), (4373, 987, 38), (4506, 1025, 43), (4556, 1068, 11),
            (4562, 1079, 29), (4593, 1108, 72), (4668, 1180, 59), (4731, 1239, 39), (4772, 1278, 11), (4822, 1289, 30),
            (4869, 1319, 34), (4989, 1353, 47), (5036, 1400, 23), (5062, 1423, 13), (5075, 1436, 22), (5113, 1458, 34),
            (5149, 1492, 11), (5191, 1503, 35), (5513, 1538, 50), (5248, 1588, 27), (5574, 1615, 33), (5711, 1648, 11),
            (5723, 1659, 11), (5740, 1670, 23), (5764, 1693, 45), (5811, 1738, 83), (5897, 1821, 51), (5951, 1872, 28),
            (5981, 1900, 47), (6058, 1947, 38), (6120, 1985, 18), (6139, 2003, 50), (6191, 2053, 17), (6216, 2070, 88),
            (6307, 2158, 79), (6401, 2237, 39), (6334, 2276, 53), (6413, 2329, 43), (6581, 2372, 45), (6628, 2417, 11),
            (6690, 2428, 41), (6920, 2469, 21), (6996, 2490, 19), (7353, 2509, 20), (7521, 2529, 11), (7532, 2540, 26),
            (7720, 2566, 61), (7806, 2627, 18), (7829, 2645, 28), (7864, 2673, 55), (7922, 2728, 19), (7952, 2747, 43),
            (7997, 2790, 17), (8014, 2807, 47), (8063, 2854, 28), (8036, 2882, 27), (8065, 2909, 12), (8077, 2921, 11),
            (8173, 2932, 12), (8185, 2944, 11), (8247, 2955, 14), (8261, 2969, 64), (8296, 3033, 27), (8799, 3060, 29),
            (8965, 3089, 31), (9015, 3120, 26), (9306, 3146, 37), (9459, 3183, 25), (9458, 3208, 12), (9498, 3220, 11),
            (9509, 3231, 46), (9627, 3277, 13), (9640, 3290, 31), (9693, 3321, 26), (9561, 3347, 37), (9715, 3384, 61),
            (9877, 3445, 34), (10199, 3479, 74), (10313, 3553, 79), (10396, 3632, 55), (10664, 3687, 11),
            (10675, 3698, 33), (10709, 3731, 13), (10723, 3744, 24), (10776, 3768, 21), (10798, 3789, 11),
            (10870, 3800, 42), (11058, 3842, 14), (11072, 3856, 11), (11084, 3867, 27), (11328, 3894, 14),
            (11345, 3908, 13), (11458, 3921, 13), (11471, 3934, 25), (11564, 3959, 14), (11583, 3976, 20),
            (11801, 3996, 34), (11894, 4030, 31), (11972, 4061, 54), (12026, 4115, 26), (12055, 4141, 15),
            (12071, 4156, 21), (12092, 4177, 32), (12126, 4209, 57), (12200, 4266, 22), (12258, 4288, 11),
            (12270, 4299, 11), (12548, 4310, 35), (12742, 4345, 28), (12808, 4373, 39), (13033, 4412, 33),
            (13068, 4445, 15), (13193, 4460, 33), (13424, 4493, 11), (13435, 4504, 11), (13447, 4515, 20),
            (13467, 4535, 20), (13789, 4555, 21), (13811, 4576, 13), (13949, 4589, 95), (14051, 4684, 15),
            (14066, 4699, 50), (14118, 4749, 32), (14152, 4781, 15), (14186, 4796, 33), (14278, 4829, 19),
            (14297, 4848, 30), (14329, 4878, 18), (14363, 4896, 12), (14376, 4908, 21), (14752, 4929, 15),
            (14767, 4944, 25), (14820, 4969, 65), (14887, 5034, 59), (14949, 5093, 82), (15035, 5175, 12),
            (15046, 5187, 15), (15068, 5202, 14), (15300, 5216, 34), (15518, 5250, 38), (15558, 5288, 72),
            (15633, 5360, 11), (15644, 5371, 39)]


def get_ab_point():
    return [(374, 1, 11), (385, 12, 11), (396, 23, 11), (408, 35, 11), (424, 51, 11), (435, 62, 11), (446, 73, 13),
            (459, 86, 11), (470, 97, 11), (481, 108, 11), (492, 119, 11), (503, 130, 12), (516, 142, 14),
            (530, 156, 11), (541, 167, 14), (555, 181, 14), (569, 195, 17), (585, 212, 149), (735, 361, 11),
            (746, 372, 11), (757, 383, 21), (778, 404, 11), (789, 415, 17), (806, 432, 11), (817, 443, 12),
            (828, 455, 12), (841, 467, 14), (855, 481, 13), (868, 494, 12), (879, 506, 14), (894, 520, 13),
            (907, 533, 25), (932, 558, 11), (943, 569, 11), (954, 580, 11), (965, 591, 11), (976, 602, 11),
            (987, 613, 11), (998, 624, 12), (1010, 636, 11), (1021, 647, 16), (1038, 663, 16), (1053, 679, 11),
            (1064, 690, 11), (1075, 701, 13), (1088, 714, 12), (1100, 726, 19), (1132, 745, 11), (1130, 756, 16),
            (1146, 772, 19), (1165, 791, 40), (1207, 831, 11), (1216, 842, 33), (1249, 875, 18), (1267, 893, 13),
            (1356, 945, 53), (1414, 998, 60), (1474, 1058, 60), (1538, 1118, 54), (1590, 1172, 12), (0, 1184, 11),
            (1609, 1195, 20), (1633, 1215, 11), (1644, 1226, 11), (1655, 1237, 11), (1666, 1248, 11), (1677, 1259, 35),
            (1712, 1294, 26), (1738, 1320, 11), (1749, 1331, 40), (1789, 1371, 14), (1803, 1385, 11), (1814, 1396, 11),
            (1825, 1407, 26), (1850, 1433, 977), (2827, 2410, 11), (2838, 2421, 11), (2849, 2432, 11), (2860, 2443, 11),
            (2871, 2454, 18), (2888, 2472, 98), (2990, 2573, 11), (3020, 2603, 15), (3035, 2618, 16), (3051, 2634, 31),
            (3082, 2665, 11), (3093, 2676, 11), (3104, 2687, 39), (3142, 2726, 96), (3239, 2822, 13), (3253, 2835, 23),
            (3276, 2858, 18), (3294, 2876, 28), (3322, 2904, 22), (3348, 2926, 11), (3355, 2937, 11), (3366, 2948, 23),
            (3389, 2971, 11), (3399, 2982, 14), (3414, 2996, 32), (3446, 3028, 11), (3457, 3039, 12), (3469, 3051, 16),
            (3485, 3067, 11), (3496, 3078, 35), (3531, 3113, 11), (3553, 3124, 17), (3559, 3141, 11), (3546, 3152, 12),
            (3545, 3164, 14), (3596, 3178, 12), (3608, 3190, 11), (3619, 3201, 12), (3631, 3213, 12), (3643, 3225, 16),
            (3659, 3241, 15), (3674, 3256, 17), (3691, 3273, 26), (3717, 3299, 41), (3758, 3340, 49), (3807, 3389, 141),
            (3948, 3530, 61), (4009, 3591, 23), (4032, 3614, 158), (4190, 3772, 11), (4201, 3783, 36), (4237, 3819, 46),
            (4283, 3865, 26), (4309, 3891, 41), (4349, 3932, 56), (4406, 3988, 25), (4431, 4013, 68), (4499, 4081, 103),
            (4602, 4184, 37), (4638, 4221, 12), (4651, 4233, 11), (4662, 4244, 23), (4685, 4267, 11), (4696, 4278, 11),
            (4707, 4289, 13), (4720, 4302, 17), (4737, 4319, 18), (4755, 4337, 20), (4775, 4357, 11), (4786, 4368, 13),
            (4799, 4381, 48), (4847, 4429, 16), (4863, 4445, 11), (4874, 4456, 12), (4886, 4468, 12), (4904, 4480, 11),
            (4909, 4491, 72), (4981, 4563, 12), (4993, 4575, 12), (5005, 4587, 20), (5025, 4607, 32), (5057, 4639, 11),
            (5068, 4650, 23), (5096, 4673, 30), (5117, 4703, 69), (5189, 4772, 15), (5205, 4787, 18), (5223, 4805, 37),
            (5259, 4842, 14), (5274, 4856, 32), (5306, 4888, 31), (5337, 4919, 16), (5353, 4935, 30), (5383, 4965, 43),
            (5426, 5008, 19), (5445, 5027, 42), (5487, 5069, 11), (5498, 5080, 15), (5513, 5095, 16), (5529, 5111, 11),
            (5539, 5122, 12), (5552, 5134, 11), (5563, 5145, 11), (5574, 5156, 11), (5585, 5167, 11), (5596, 5178, 15),
            (5611, 5193, 14), (5625, 5207, 15), (5640, 5222, 12), (5652, 5234, 12), (5664, 5246, 12), (5676, 5258, 64),
            (5740, 5322, 11), (5751, 5333, 11), (5762, 5344, 11), (5773, 5355, 21), (5794, 5376, 29), (5823, 5405, 11),
            (5834, 5416, 23), (5857, 5439, 29), (5886, 5468, 27), (5913, 5495, 46), (5959, 5541, 24), (5988, 5565, 23),
            (6004, 5588, 1671), (7677, 7259, 58), (7735, 7317, 17), (7752, 7334, 12), (7764, 7346, 33),
            (7797, 7379, 18), (7822, 7397, 23), (7825, 7420, 31), (7866, 7451, 26), (7895, 7477, 101), (7996, 7578, 11),
            (8007, 7589, 13), (8020, 7602, 75), (8094, 7677, 1240), (9334, 8917, 45), (9379, 8962, 12),
            (9391, 8974, 11), (9402, 8985, 11), (9413, 8996, 68), (9480, 9064, 477), (9958, 9541, 40),
            (10000, 9583, 41), (10043, 9627, 71), (10116, 9700, 26), (10144, 9728, 47), (10192, 9776, 133),
            (10325, 9909, 45), (10369, 9954, 64), (10434, 10018, 19), (10453, 10037, 20), (10473, 10057, 20),
            (10493, 10077, 17), (10510, 10094, 20), (10530, 10114, 29), (10559, 10143, 18), (10577, 10161, 20),
            (10596, 10181, 416), (11014, 10597, 32), (11045, 10629, 375), (11422, 11004, 32), (11454, 11036, 28),
            (11482, 11064, 53), (11535, 11117, 48), (11584, 11165, 159), (11742, 11324, 15), (11757, 11339, 11),
            (11768, 11350, 26), (11794, 11376, 11), (11805, 11387, 16), (11821, 11403, 32), (11853, 11435, 28),
            (11881, 11463, 15), (11896, 11478, 11), (11907, 11489, 18), (11927, 11507, 12), (11937, 11519, 13),
            (11950, 11532, 58), (12008, 11590, 42), (12050, 11632, 24), (12074, 11656, 11), (12085, 11667, 47),
            (12132, 11714, 39), (12171, 11753, 18), (12189, 11771, 14), (12203, 11785, 38), (12241, 11823, 17),
            (12258, 11840, 12), (12270, 11852, 18), (12288, 11870, 11), (12299, 11881, 12), (12311, 11893, 24),
            (12335, 11917, 11), (12348, 11930, 11), (12359, 11941, 34), (12393, 11975, 23), (12419, 11998, 109),
            (12529, 12120, 44), (12576, 12164, 11), (12587, 12175, 11), (12623, 12186, 13), (12611, 12199, 12),
            (12623, 12211, 15), (12638, 12226, 20), (12658, 12246, 33), (12691, 12279, 18), (12709, 12297, 50),
            (12759, 12347, 51), (12809, 12398, 68), (12878, 12466, 12), (12890, 12478, 19), (12909, 12497, 14),
            (12923, 12511, 12), (12935, 12523, 14), (12949, 12537, 15), (12964, 12552, 17), (12981, 12569, 15),
            (12996, 12584, 12), (13013, 12596, 11), (13018, 12607, 11), (13029, 12618, 30), (13059, 12648, 15),
            (13074, 12663, 23), (13097, 12686, 13), (13110, 12699, 11), (13121, 12710, 11), (13132, 12721, 11),
            (13143, 12732, 31), (13174, 12763, 14), (13188, 12777, 11), (13199, 12788, 11), (13209, 12799, 12),
            (13222, 12811, 57), (13279, 12868, 11), (13290, 12879, 26), (13316, 12905, 24), (13340, 12929, 20),
            (13360, 12949, 12), (13372, 12961, 25), (13397, 12986, 44), (13441, 13030, 20), (13461, 13050, 11),
            (13472, 13061, 21), (13493, 13082, 11), (13504, 13093, 11), (13515, 13104, 52), (13567, 13156, 11),
            (13578, 13167, 29), (13607, 13196, 11), (13618, 13207, 14), (13632, 13221, 17), (13649, 13238, 11),
            (13659, 13249, 12), (13672, 13261, 11), (13683, 13272, 47), (13730, 13319, 15), (13745, 13334, 16),
            (13761, 13350, 12), (13773, 13362, 25), (13798, 13387, 44), (13842, 13431, 20), (13862, 13451, 11),
            (13873, 13462, 54), (13927, 13516, 15), (13942, 13531, 28), (13970, 13559, 30), (14000, 13589, 32),
            (14032, 13621, 11), (14043, 13632, 21), (14064, 13653, 11), (14075, 13664, 11), (14086, 13675, 12),
            (14098, 13687, 12), (14109, 13699, 46), (14156, 13745, 51), (14207, 13796, 64), (14271, 13860, 11),
            (14282, 13871, 16), (14298, 13887, 18), (14316, 13905, 11), (14327, 13916, 11), (14338, 13927, 17),
            (14355, 13944, 21), (14376, 13965, 15), (14391, 13980, 13), (14404, 13993, 11), (14415, 14004, 15),
            (14430, 14019, 27), (14457, 14046, 178), (14635, 14224, 58), (14692, 14282, 105), (14799, 14387, 12),
            (14811, 14399, 11), (14822, 14410, 80), (14901, 14490, 124), (15025, 14614, 31), (15056, 14645, 16),
            (15072, 14661, 11), (15083, 14672, 12), (15095, 14684, 11), (15106, 14695, 17), (15124, 14712, 41),
            (15164, 14753, 11), (15175, 14764, 42), (15217, 14806, 36), (15253, 14842, 47), (15299, 14889, 12),
            (15312, 14901, 13), (15325, 14914, 11), (15336, 14925, 24), (15359, 14949, 67), (15427, 15016, 39),
            (15466, 15055, 12), (15478, 15067, 35), (15513, 15102, 12), (15525, 15114, 17), (15547, 15131, 12),
            (15554, 15143, 14), (15568, 15157, 157), (15725, 15314, 11), (15736, 15325, 31), (15769, 15356, 67),
            (15834, 15423, 12), (15847, 15435, 15), (15861, 15450, 17), (15878, 15467, 11), (15889, 15478, 27),
            (15916, 15505, 11), (15927, 15516, 11), (15938, 15527, 12), (15949, 15539, 17), (15967, 15556, 21),
            (15988, 15577, 15), (16027, 15592, 34), (16008, 15626, 44), (16081, 15670, 18), (16099, 15688, 62),
            (16161, 15750, 139), (16299, 15889, 167), (16467, 16056, 11), (16478, 16067, 30), (16508, 16097, 31),
            (16539, 16128, 32), (16571, 16160, 15), (16586, 16175, 14), (16600, 16189, 39), (16639, 16228, 143),
            (16781, 16371, 386), (17132, 16757, 4)]


def get_file_by_path(f_list, temp_path):
    for f in f_list:
        if f.file_path == temp_path:
            return f

    file = PrFile().generate_file(temp_path)
    print(f'create file [{temp_path}] len f_list = [{len(f_list)}]')

    f_list.append(file)

    return file


def generate_clip_item(a_start, b_start, temp_length, temp_path, temp_file_list):
    temp_ffile = get_file_by_path(temp_file_list, temp_path)
    clip_item = ClipItem().generate_clip_item_full((b_start, b_start + temp_length), (a_start, a_start + temp_length),
                                                   fps=temp_ffile.fps, total_frames=temp_ffile.total_frames,
                                                   name=BLUtils.get_filename(temp_ffile.file_path))
    clip_item.file = temp_ffile

    return clip_item


class RunnerClass:

    @staticmethod
    def generate_result_xml_path(video_name):
        result_dir = '../static/result/'
        file_name, ext = os.path.splitext(video_name)
        xml_name = file_name + '.xml'
        result_file = os.path.join(result_dir, xml_name)
        result_path = BLUtils.get_unique_filename(result_file)
        return result_path

    @staticmethod
    def get_all_info_str(a_path):
        video_name = BLUtils.get_filename(a_path)

        # 使用 OpenCV 获取视频相关信息
        cap = cv2.VideoCapture(a_path)
        if not cap.isOpened():
            print("Error opening video file")
            return

        fps = cap.get(cv2.CAP_PROP_FPS)

        if fps % 1 < 0.01:
            fps = int(fps)

        total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
        width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))

        height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

        # 注意：这里假设 file_path 是一个绝对路径
        file_url = parse.quote(a_path)
        path_url = f"file://localhost/{file_url}"
        cap.release()

        return str(total_frames), str(fps), str(video_name), str(width), str(height), str(path_url)

    @staticmethod
    def generate_base_xml():

        file_template_path = '../static/xml_template/base_template.xml'

        with open(file_template_path, 'r') as f:
            data = f.read()

        return data

    @staticmethod
    def generate_file_label():

        file_template_path = '../static/xml_template/file_template.xml'

        with open(file_template_path, 'r') as f:
            data = f.read()

        return data

    @staticmethod
    def generate_clip_items(ab_points, audio_index=None):
        clip_item_path = '../static/xml_template/clip_item_template.xml'

        with open(clip_item_path, 'r') as f:
            data = f.read()
            # print(data)

        clip_items = []

        for a_s, b_s, length in ab_points:
            clip_id = uuid.uuid4().__str__()
            start, end = b_s, b_s + length
            in_, out = a_s, a_s + length

            temp_data = data
            temp_data = temp_data.replace('{clip_item_id}', clip_id)
            temp_data = temp_data.replace('{start}', str(start))
            temp_data = temp_data.replace('{end}', str(end))
            temp_data = temp_data.replace('{in}', str(in_))
            temp_data = temp_data.replace('{out}', str(out))

            if audio_index is None:
                temp_data = temp_data.replace('{source_track}', '')
            elif audio_index == 1:
                temp_data = temp_data.replace('{source_track}', """<sourcetrack>
    <mediatype>audio</mediatype>
    <trackindex>1</trackindex>
</sourcetrack>""")
            elif audio_index == 2:
                temp_data = temp_data.replace('{source_track}', """<sourcetrack>
   <mediatype>audio</mediatype>
   <trackindex>2</trackindex>
</sourcetrack>""")
            else:
                raise Exception('未知的参数')

            clip_items.append(temp_data)

        # 如果是视频clip_items 需要把第一个file标签替换掉
        first_item = clip_items[0]
        first_item = first_item.replace('<file id="file-5"/>', RunnerClass.generate_file_label())

        clip_items[0] = first_item

        return str.join('\n', clip_items)


def main():
    ab_points = get_ab_point_2()

    a_path = "F:/xunleiyunpan/S01E45.Jiggles.mkv"
    # b_path = "E:/360MoveData/Users/MrB/Desktop/企鹅特工孵化鸭子，用训练作为胎教，结果鸭子一出生就成为特工@不正经的小酥肉.mp4"

    video_clip_items = RunnerClass.generate_clip_items(ab_points, None)
    audio_clip_items_1 = RunnerClass.generate_clip_items(ab_points, 1)
    audio_clip_items_2 = RunnerClass.generate_clip_items(ab_points, 2)

    base_xml = RunnerClass.generate_base_xml()
    base_xml = base_xml.replace('{video_clip_items}', video_clip_items)
    base_xml = base_xml.replace('{audio_clip_items_1}', audio_clip_items_1)
    base_xml = base_xml.replace('{audio_clip_items_2}', audio_clip_items_2)

    # 替换掉所有得主要信息 total_frames fps video_name width height path_url

    total_frames, fps, video_name, width, height, path_url = RunnerClass.get_all_info_str(a_path)

    base_xml = base_xml.replace('{total_frames}', total_frames)
    base_xml = base_xml.replace('{fps}', fps)
    base_xml = base_xml.replace('{video_name}', video_name)
    base_xml = base_xml.replace('{width}', width)
    base_xml = base_xml.replace('{height}', height)
    base_xml = base_xml.replace('{path_url}', path_url)

    # print(base_xml)
    result_path = RunnerClass.generate_result_xml_path(video_name)

    with open(result_path, 'w') as result_video_file:
        result_video_file.write(base_xml)

    print(f'已生成xml文件 >> {result_path}')


if __name__ == '__main__':
    main()
